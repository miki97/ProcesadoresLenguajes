ent principal()
{
    var:
        ent  ve ;
        real vf ;
        car  vc ;
        bool vl ;
        lista de ent pe, pe2 ;
        lista de real pf, pf2;
        lista de car pc, pc2;
        lista de bool pl ;
    :var

    ent funcionA (ent a1, real a2, car a3)
    {
        var:
            ent x1, x2 ;
        :var
        car funcionB (car b1, bool b2)
        {
            var:
                real xf ,x2;
            :var
            
            real funcionC (bool c1, ent c2)
            {
                var:
                    real x1 ;
                :var
                x1= 1.3 ;
                x1= 2.3 ;
                
                si (c2>10)
                    c2 = c2 - 1 ;
                otro
                    x1 = 3.5 ;
                devuelve x1 ;
            }
            
            xf= funcionC (verdadero, 10);
            x2= xf*(funcionC(verdadero,10)-funcionC(verdadero,23))/10.0;

            mientras (x2*funcionC(falso,1)-xf<10.0)
                x2= x2*xf ;
            devuelve 'a';
        }
        real funcionD (real d1)
        {
            var:
                car dato ;
                ent valor ;
            :var
            car funcionE (car e1, car e2)
            {
                salida "Introduce valores";
                entrada e1, e2 ;
                si (e1=='a')
                    devuelve e1 ;
                otro 
                    si (e1=='b')
                        devuelve e2 ;
                    otro
                        devuelve 'a';
            }
            salida "introduzca un valor entero: ";
            entrada valor ;
            si (d1>0.0)
            {
                var:
                    ent dato ;
                :var
                dato= 2 ;
                dato= valor*20/dato ;
            }
            otro {
                valor= valor * 100 ;
                d1= d1/1000.0 ;
            }
            devuelve d1 ;
        }
        devuelve 10;
    }
    
    pe = pe++5@2;
    pe = pe++1@1;
    pe = pe++3@2;
    si(#pe > 2)
        pe = pe--2;
    si( ?pe == 1)
        pe = pe%1;
    pe2 = pe2++5@0;
       
    pe = 2 + pe;


    pe = pe + 2;
    pe = pe - 2;
    pe = pe * 2;
    pe = 2 * pe;
    pe = pe / 2;
}